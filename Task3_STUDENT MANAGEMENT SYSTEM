import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

class Student {
    private String name;
    private String rollNumber;
    private int grade;

    // Add any other relevant details as needed

    public Student(String name, String rollNumber, int grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    // Getters and setters for the attributes (optional)

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRollNumber() {
        return rollNumber;
    }

    public void setRollNumber(String rollNumber) {
        this.rollNumber = rollNumber;
    }

    public int getGrade() {
        return grade;
    }

    public void setGrade(int grade) {
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Roll Number: " + rollNumber + ", Grade: " + grade;
    }
}

class StudentManagementSystem extends JFrame {
    private List<Student> students;
    private JTextField nameField, rollNumberField, gradeField;
    private JTextArea outputArea;

    public StudentManagementSystem() {
        students = new ArrayList<>();

        setTitle("Student Management System");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        setSize(500, 400);

        createComponents();
        loadStudentsFromFile();
        displayStudents();
    }

    private void createComponents() {
        // Input fields
        JPanel inputPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JLabel nameLabel = new JLabel("Name:");
        nameField = new JTextField();
        inputPanel.add(nameLabel);
        inputPanel.add(nameField);

        JLabel rollNumberLabel = new JLabel("Roll Number:");
        rollNumberField = new JTextField();
        inputPanel.add(rollNumberLabel);
        inputPanel.add(rollNumberField);

        JLabel gradeLabel = new JLabel("Grade:");
        gradeField = new JTextField();
        inputPanel.add(gradeLabel);
        inputPanel.add(gradeField);

        JButton addButton = new JButton("Add Student");
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addStudent();
            }
        });
        inputPanel.add(addButton);

        JButton removeButton = new JButton("Remove Student");
        removeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                removeStudent();
            }
        });
        inputPanel.add(removeButton);

        JButton searchButton = new JButton("Search Student");
        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                searchStudent();
            }
        });
        inputPanel.add(searchButton);

        // Output area
        outputArea = new JTextArea();
        outputArea.setEditable(false);

        // Main panel
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.add(inputPanel, BorderLayout.NORTH);
        mainPanel.add(new JScrollPane(outputArea), BorderLayout.CENTER);

        add(mainPanel);
    }

    private void addStudent() {
        String name = nameField.getText().trim();
        String rollNumber = rollNumberField.getText().trim();
        String gradeText = gradeField.getText().trim();

        if (name.isEmpty() || rollNumber.isEmpty() || gradeText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int grade = Integer.parseInt(gradeText);
            Student student = new Student(name, rollNumber, grade);
            students.add(student);
            writeStudentsToFile();
            displayStudents();
            clearFields();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid grade value. Please enter a valid integer.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeStudent() {
        String rollNumber = rollNumberField.getText().trim();
        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                students.remove(student);
                writeStudentsToFile();
                displayStudents();
                clearFields();
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Student with the given roll number not found.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void searchStudent() {
        String rollNumber = rollNumberField.getText().trim();
        for (Student student : students) {
            if (student.getRollNumber().equals(rollNumber)) {
                outputArea.setText(student.toString());
                clearFields();
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Student with the given roll number not found.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void writeStudentsToFile() {
        try (ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("students.dat"))) {
            outputStream.writeObject(students);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadStudentsFromFile() {
        try (ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("students.dat"))) {
            students = (List<Student>) inputStream.readObject();
        } catch (IOException | ClassNotFoundException e) {
            students = new ArrayList<>();
        }
    }

    private void displayStudents() {
        outputArea.setText("");
        for (Student student : students) {
            outputArea.append(student.toString() + "\n");
        }
    }

    private void clearFields() {
        nameField.setText("");
        rollNumberField.setText("");
        gradeField.setText("");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new StudentManagementSystem().setVisible(true);
        });
    }
}
